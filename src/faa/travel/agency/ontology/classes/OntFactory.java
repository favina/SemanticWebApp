package faa.travel.agency.ontology.classes;

import faa.travel.agency.ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: OntFactory<br>
 * @version generated on Mon Apr 17 12:31:15 BST 2017 by favina
 */
public class OntFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public OntFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public OntFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Accomodation
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Accomodation", Accomodation.class, DefaultAccomodation.class);
    }

    /**
     * Creates an instance of type Accomodation.  Modifies the underlying ontology.
     */
    public Accomodation createAccomodation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCOMODATION, DefaultAccomodation.class);
    }

    /**
     * Gets an instance of type Accomodation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Accomodation getAccomodation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCOMODATION, DefaultAccomodation.class);
    }

    /**
     * Gets all instances of Accomodation from the ontology.
     */
    public Collection<? extends Accomodation> getAllAccomodationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCOMODATION, DefaultAccomodation.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Activity
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Activity", Activity.class, DefaultActivity.class);
    }

    /**
     * Creates an instance of type Activity.  Modifies the underlying ontology.
     */
    public Activity createActivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets an instance of type Activity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Activity getActivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets all instances of Activity from the ontology.
     */
    public Collection<? extends Activity> getAllActivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Adventure
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Adventure", Adventure.class, DefaultAdventure.class);
    }

    /**
     * Creates an instance of type Adventure.  Modifies the underlying ontology.
     */
    public Adventure createAdventure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }

    /**
     * Gets an instance of type Adventure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Adventure getAdventure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }

    /**
     * Gets all instances of Adventure from the ontology.
     */
    public Collection<? extends Adventure> getAllAdventureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Attraction
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Attraction", Attraction.class, DefaultAttraction.class);
    }

    /**
     * Creates an instance of type Attraction.  Modifies the underlying ontology.
     */
    public Attraction createAttraction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATTRACTION, DefaultAttraction.class);
    }

    /**
     * Gets an instance of type Attraction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Attraction getAttraction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATTRACTION, DefaultAttraction.class);
    }

    /**
     * Gets all instances of Attraction from the ontology.
     */
    public Collection<? extends Attraction> getAllAttractionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATTRACTION, DefaultAttraction.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#BnB
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#BnB", BnB.class, DefaultBnB.class);
    }

    /**
     * Creates an instance of type BnB.  Modifies the underlying ontology.
     */
    public BnB createBnB(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BNB, DefaultBnB.class);
    }

    /**
     * Gets an instance of type BnB with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BnB getBnB(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BNB, DefaultBnB.class);
    }

    /**
     * Gets all instances of BnB from the ontology.
     */
    public Collection<? extends BnB> getAllBnBInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BNB, DefaultBnB.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Budget
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Budget", Budget.class, DefaultBudget.class);
    }

    /**
     * Creates an instance of type Budget.  Modifies the underlying ontology.
     */
    public Budget createBudget(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUDGET, DefaultBudget.class);
    }

    /**
     * Gets an instance of type Budget with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Budget getBudget(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUDGET, DefaultBudget.class);
    }

    /**
     * Gets all instances of Budget from the ontology.
     */
    public Collection<? extends Budget> getAllBudgetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUDGET, DefaultBudget.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Bushcraft
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Bushcraft", Bushcraft.class, DefaultBushcraft.class);
    }

    /**
     * Creates an instance of type Bushcraft.  Modifies the underlying ontology.
     */
    public Bushcraft createBushcraft(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSHCRAFT, DefaultBushcraft.class);
    }

    /**
     * Gets an instance of type Bushcraft with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bushcraft getBushcraft(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSHCRAFT, DefaultBushcraft.class);
    }

    /**
     * Gets all instances of Bushcraft from the ontology.
     */
    public Collection<? extends Bushcraft> getAllBushcraftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSHCRAFT, DefaultBushcraft.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#City
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#City", City.class, DefaultCity.class);
    }

    /**
     * Creates an instance of type City.  Modifies the underlying ontology.
     */
    public City createCity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets an instance of type City with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public City getCity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets all instances of City from the ontology.
     */
    public Collection<? extends City> getAllCityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CITY, DefaultCity.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Customer
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Customer", Customer.class, DefaultCustomer.class);
    }

    /**
     * Creates an instance of type Customer.  Modifies the underlying ontology.
     */
    public Customer createCustomer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CUSTOMER, DefaultCustomer.class);
    }

    /**
     * Gets an instance of type Customer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Customer getCustomer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CUSTOMER, DefaultCustomer.class);
    }

    /**
     * Gets all instances of Customer from the ontology.
     */
    public Collection<? extends Customer> getAllCustomerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CUSTOMER, DefaultCustomer.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Customer_Type
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Customer_Type", Customer_Type.class, DefaultCustomer_Type.class);
    }

    /**
     * Creates an instance of type Customer_Type.  Modifies the underlying ontology.
     */
    public Customer_Type createCustomer_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CUSTOMER_TYPE, DefaultCustomer_Type.class);
    }

    /**
     * Gets an instance of type Customer_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Customer_Type getCustomer_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CUSTOMER_TYPE, DefaultCustomer_Type.class);
    }

    /**
     * Gets all instances of Customer_Type from the ontology.
     */
    public Collection<? extends Customer_Type> getAllCustomer_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CUSTOMER_TYPE, DefaultCustomer_Type.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Fishing
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Fishing", Fishing.class, DefaultFishing.class);
    }

    /**
     * Creates an instance of type Fishing.  Modifies the underlying ontology.
     */
    public Fishing createFishing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FISHING, DefaultFishing.class);
    }

    /**
     * Gets an instance of type Fishing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fishing getFishing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FISHING, DefaultFishing.class);
    }

    /**
     * Gets all instances of Fishing from the ontology.
     */
    public Collection<? extends Fishing> getAllFishingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FISHING, DefaultFishing.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#GuidedTour
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#GuidedTour", GuidedTour.class, DefaultGuidedTour.class);
    }

    /**
     * Creates an instance of type GuidedTour.  Modifies the underlying ontology.
     */
    public GuidedTour createGuidedTour(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GUIDEDTOUR, DefaultGuidedTour.class);
    }

    /**
     * Gets an instance of type GuidedTour with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GuidedTour getGuidedTour(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GUIDEDTOUR, DefaultGuidedTour.class);
    }

    /**
     * Gets all instances of GuidedTour from the ontology.
     */
    public Collection<? extends GuidedTour> getAllGuidedTourInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GUIDEDTOUR, DefaultGuidedTour.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Hotel
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Hotel", Hotel.class, DefaultHotel.class);
    }

    /**
     * Creates an instance of type Hotel.  Modifies the underlying ontology.
     */
    public Hotel createHotel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets an instance of type Hotel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hotel getHotel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets all instances of Hotel from the ontology.
     */
    public Collection<? extends Hotel> getAllHotelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Monument
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Monument", Monument.class, DefaultMonument.class);
    }

    /**
     * Creates an instance of type Monument.  Modifies the underlying ontology.
     */
    public Monument createMonument(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MONUMENT, DefaultMonument.class);
    }

    /**
     * Gets an instance of type Monument with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Monument getMonument(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MONUMENT, DefaultMonument.class);
    }

    /**
     * Gets all instances of Monument from the ontology.
     */
    public Collection<? extends Monument> getAllMonumentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MONUMENT, DefaultMonument.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Package
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Package", Package.class, DefaultPackage.class);
    }

    /**
     * Creates an instance of type Package.  Modifies the underlying ontology.
     */
    public Package createPackage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PACKAGE, DefaultPackage.class);
    }

    /**
     * Gets an instance of type Package with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Package getPackage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PACKAGE, DefaultPackage.class);
    }

    /**
     * Gets all instances of Package from the ontology.
     */
    public Collection<? extends Package> getAllPackageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PACKAGE, DefaultPackage.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Person
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Place
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Place", Place.class, DefaultPlace.class);
    }

    /**
     * Creates an instance of type Place.  Modifies the underlying ontology.
     */
    public Place createPlace(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets an instance of type Place with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Place getPlace(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets all instances of Place from the ontology.
     */
    public Collection<? extends Place> getAllPlaceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }


    /* ***************************************************
     * Class http://www.le.ac.uk/travelAgencyOntology.owl#Rating
     */

    {
        javaMapping.add("http://www.le.ac.uk/travelAgencyOntology.owl#Rating", Rating.class, DefaultRating.class);
    }

    /**
     * Creates an instance of type Rating.  Modifies the underlying ontology.
     */
    public Rating createRating(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RATING, DefaultRating.class);
    }

    /**
     * Gets an instance of type Rating with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rating getRating(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RATING, DefaultRating.class);
    }

    /**
     * Gets all instances of Rating from the ontology.
     */
    public Collection<? extends Rating> getAllRatingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RATING, DefaultRating.class);
    }


}
